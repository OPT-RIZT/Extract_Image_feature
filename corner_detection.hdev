<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="19.11.0.0">
<procedure name="main">
<interface/>
<body>
<c></c>
<c></c>
<c></c>
<l>read_image (TemplateRoi, 'C:/Users/lenovo/Desktop/PaddleOCR/PaddleOCR/TotalStation/bin/x64/Debug/net6.0-windows/template_roi.jpg')</l>
<c></c>
<c as_id="matching" as_name="Matching 01" as_grp="[0]" as_ord="1">* </c>
<c as_id="matching" as_name="Matching 01" as_grp="[0]" as_ord="2">* Matching 01: ************************************************</c>
<c as_id="matching" as_name="Matching 01" as_grp="[0]" as_ord="3">* Matching 01: BEGIN of generated code for model initialization</c>
<c as_id="matching" as_name="Matching 01" as_grp="[0]" as_ord="4">* Matching 01: ************************************************</c>
<l as_id="matching" as_name="Matching 01" as_grp="[0]" as_ord="5">set_system ('border_shape_models', 'false')</l>
<c as_id="matching" as_name="Matching 01" as_grp="[0]" as_ord="6">* </c>
<c as_id="matching" as_name="Matching 01" as_grp="[1,1,1]" as_ord="1">* Matching 01: Obtain the model image</c>
<l as_id="matching" as_name="Matching 01" as_grp="[1,1,1]" as_ord="2">read_image (Image, 'C:/Users/lenovo/Desktop/4个角/2.bmp')</l>
<c as_id="matching" as_name="Matching 01" as_grp="[1,1,2]" as_ord="1">* </c>
<c as_id="matching" as_name="Matching 01" as_grp="[1,1,2]" as_ord="2">* Matching 01: Build the ROI from basic regions</c>
<l as_id="matching" as_name="Matching 01" as_grp="[1,1,2]" as_ord="3">gen_rectangle1 (ModelRegion, 940.267, 1877.13, 1261.38, 2501.52)</l>
<c as_id="matching" as_name="Matching 01" as_grp="[1,1,3]" as_ord="1">* </c>
<c as_id="matching" as_name="Matching 01" as_grp="[1,1,3]" as_ord="2">* Matching 01: Reduce the model template</c>
<l as_id="matching" as_name="Matching 01" as_grp="[1,1,3]" as_ord="3">reduce_domain (Image, ModelRegion, TemplateImage)</l>
<c as_id="matching" as_name="Matching 01" as_grp="[1,1,4]" as_ord="1">* </c>
<c as_id="matching" as_name="Matching 01" as_grp="[1,1,4]" as_ord="2">* Matching 01: Create the shape model</c>
<l as_id="matching" as_name="Matching 01" as_grp="[1,1,4]" as_ord="3">create_shape_model (TemplateImage, 7, rad(0), rad(360), rad(0.3443), ['point_reduction_medium','pregeneration'], 'ignore_global_polarity', [39,63,67], 4, ModelID)</l>
<c as_id="matching" as_name="Matching 01" as_grp="[1,2]" as_ord="1">* </c>
<c as_id="matching" as_name="Matching 01" as_grp="[1,2]" as_ord="2">* Matching 01: Get the model contour for transforming it later into the image</c>
<l as_id="matching" as_name="Matching 01" as_grp="[1,2]" as_ord="3">get_shape_model_contours (ModelContours, ModelID, 1)</l>
<c as_id="matching" as_name="Matching 01" as_grp="[1,5]" as_ord="1">* </c>
<c as_id="matching" as_name="Matching 01" as_grp="[1,5]" as_ord="2">* Matching 01: Get the reference position</c>
<l as_id="matching" as_name="Matching 01" as_grp="[1,5]" as_ord="3">area_center (ModelRegion, ModelRegionArea, RefRow, RefColumn)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[1,5]" as_ord="4">vector_angle_to_rigid (0, 0, 0, RefRow, RefColumn, 0, HomMat2D)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[1,5]" as_ord="5">affine_trans_contour_xld (ModelContours, TransContours, HomMat2D)</l>
<c as_id="matching" as_name="Matching 01" as_grp="[1,5]" as_ord="6">* </c>
<c as_id="matching" as_name="Matching 01" as_grp="[1,5]" as_ord="7">* Matching 01: Display the model contours</c>
<l as_id="matching" as_name="Matching 01" as_grp="[1,5]" as_ord="8">dev_display (Image)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[1,5]" as_ord="9">dev_set_color ('green')</l>
<l as_id="matching" as_name="Matching 01" as_grp="[1,5]" as_ord="10">dev_set_draw ('margin')</l>
<l as_id="matching" as_name="Matching 01" as_grp="[1,5]" as_ord="11">dev_display (ModelRegion)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[1,5]" as_ord="12">dev_display (TransContours)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[1,5]" as_ord="13">stop ()</l>
<c as_id="matching" as_name="Matching 01" as_grp="[2]" as_ord="1">* </c>
<c as_id="matching" as_name="Matching 01" as_grp="[2]" as_ord="2">* Matching 01: END of generated code for model initialization</c>
<c as_id="matching" as_name="Matching 01" as_grp="[3,1]" as_ord="1">* Matching 01:  * * * * * * * * * * * * * * * * * * * * * * *</c>
<c as_id="matching" as_name="Matching 01" as_grp="[3,1]" as_ord="2">* Matching 01: BEGIN of generated code for model application</c>
<c as_id="matching" as_name="Matching 01" as_grp="[4]" as_ord="1">* </c>
<c as_id="matching" as_name="Matching 01" as_grp="[4]" as_ord="2">* Matching 01: Loop over all specified test images</c>
<l as_id="matching" as_name="Matching 01" as_grp="[4]" as_ord="3">TestImages := ['C:/Users/lenovo/Desktop/4个角/1.bmp','C:/Users/lenovo/Desktop/4个角/2.bmp','C:/Users/lenovo/Desktop/4个角/21.bmp','C:/Users/lenovo/Desktop/4个角/3.bmp','C:/Users/lenovo/Desktop/4个角/4.bmp']</l>
<l as_id="matching" as_name="Matching 01" as_grp="[4]" as_ord="4">for T := 0 to 4 by 1</l>
<c as_id="matching" as_name="Matching 01" as_grp="[5]" as_ord="1">    * </c>
<c as_id="matching" as_name="Matching 01" as_grp="[5]" as_ord="2">    * Matching 01: Obtain the test image</c>
<l as_id="matching" as_name="Matching 01" as_grp="[5]" as_ord="3">    read_image (Image, TestImages[T])</l>
<l>    highpass_image(Image, Highpass, 3,3)</l>
<l>    decompose3(Highpass, Image1, Image2, Image3)</l>
<l>    connection(Image3, ConnectedRegions1)</l>
<c>    </c>
<c as_id="matching" as_name="Matching 01" as_grp="[6]" as_ord="1">    * </c>
<c as_id="matching" as_name="Matching 01" as_grp="[6]" as_ord="2">    * Matching 01: Find the model</c>
<l as_id="matching" as_name="Matching 01" as_grp="[6]" as_ord="3">    find_shape_model (Image, ModelID, rad(0), rad(360), 0.34, 1, 0.48, 'least_squares', [7,2], 0.74, Row, Column, Angle, Score)</l>
<c as_id="matching" as_name="Matching 01" as_grp="[7,1]" as_ord="1">    * </c>
<c as_id="matching" as_name="Matching 01" as_grp="[7,1]" as_ord="2">    * Matching 01: Transform the model contours into the detected positions</c>
<l as_id="matching" as_name="Matching 01" as_grp="[7,1]" as_ord="3">    dev_display (Image)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[7,2]" as_ord="1">    for I := 0 to |Score| - 1 by 1</l>
<l as_id="matching" as_name="Matching 01" as_grp="[7,3]" as_ord="1">        hom_mat2d_identity (HomMat2D)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[7,5]" as_ord="1">        hom_mat2d_rotate (HomMat2D, Angle[I], 0, 0, HomMat2D)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[7,5]" as_ord="2">        hom_mat2d_translate (HomMat2D, Row[I], Column[I], HomMat2D)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[7,5]" as_ord="3">        affine_trans_contour_xld (ModelContours, TransContours, HomMat2D)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[7,6]" as_ord="1">        dev_set_color ('green')</l>
<l as_id="matching" as_name="Matching 01" as_grp="[7,6]" as_ord="2">        dev_display (TransContours)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[7,6]" as_ord="3">        stop ()</l>
<l as_id="matching" as_name="Matching 01" as_grp="[7,7]" as_ord="1">    endfor</l>
<c as_id="matching" as_name="Matching 01" as_grp="[8,1]" as_ord="1">    * </c>
<c as_id="matching" as_name="Matching 01" as_grp="[8,1]" as_ord="2">    * Matching 01: Code for alignment of e.g. measurements</c>
<c as_id="matching" as_name="Matching 01" as_grp="[8,1]" as_ord="3">    * Matching 01: Calculate a hom_mat2d for each of the matching results</c>
<l as_id="matching" as_name="Matching 01" as_grp="[8,2]" as_ord="1">    for I := 0 to |Score| - 1 by 1</l>
<l as_id="matching" as_name="Matching 01" as_grp="[8,3]" as_ord="1">        hom_mat2d_identity (AlignmentHomMat2D)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[8,4]" as_ord="1">        hom_mat2d_translate (AlignmentHomMat2D, -RefRow, -RefColumn, AlignmentHomMat2D)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[8,4]" as_ord="2">        hom_mat2d_rotate (AlignmentHomMat2D, Angle[I], 0, 0, AlignmentHomMat2D)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[8,4]" as_ord="3">        hom_mat2d_translate (AlignmentHomMat2D, Row[I], Column[I], AlignmentHomMat2D)</l>
<c as_id="matching" as_name="Matching 01" as_grp="[8,5]" as_ord="1">        * Matching 01: Insert your code using the alignment here, e.g. code generated by</c>
<c as_id="matching" as_name="Matching 01" as_grp="[8,5]" as_ord="2">        * Matching 01: the measure assistant with the code generation option</c>
<c as_id="matching" as_name="Matching 01" as_grp="[8,5]" as_ord="3">        * Matching 01: 'Alignment Method' set to 'Affine Transformation'.</c>
<l as_id="matching" as_name="Matching 01" as_grp="[8,6]" as_ord="1">    endfor</l>
<c as_id="matching" as_name="Matching 01" as_grp="[9,1]" as_ord="1">    * </c>
<c as_id="matching" as_name="Matching 01" as_grp="[9,1]" as_ord="2">    * Matching 01: Code for rectification of the image</c>
<c as_id="matching" as_name="Matching 01" as_grp="[9,1]" as_ord="3">    * Matching 01: Calculate an inverse hom_mat2d for each of the matching results</c>
<l as_id="matching" as_name="Matching 01" as_grp="[9,2]" as_ord="1">    for I := 0 to |Score| - 1 by 1</l>
<l as_id="matching" as_name="Matching 01" as_grp="[9,3]" as_ord="1">        hom_mat2d_identity (RectificationHomMat2D)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[9,4]" as_ord="1">        hom_mat2d_translate (RectificationHomMat2D, RefRow-Row[I], RefColumn-Column[I], RectificationHomMat2D)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[9,4]" as_ord="2">        hom_mat2d_rotate (RectificationHomMat2D, -Angle[I], RefRow, RefColumn, RectificationHomMat2D)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[9,5]" as_ord="1">        affine_trans_image (Image, RectifiedImage, RectificationHomMat2D, 'constant', 'false')</l>
<c as_id="matching" as_name="Matching 01" as_grp="[9,6]" as_ord="1">        * </c>
<c as_id="matching" as_name="Matching 01" as_grp="[9,6]" as_ord="2">        * Matching 01: Insert your code using the rectified image here</c>
<l as_id="matching" as_name="Matching 01" as_grp="[9,7]" as_ord="1">    endfor</l>
<l as_id="matching" as_name="Matching 01" as_grp="[10]" as_ord="1">endfor</l>
<l>stop()</l>
<c as_id="matching" as_name="Matching 01" as_grp="[11]" as_ord="1">* </c>
<c as_id="matching" as_name="Matching 01" as_grp="[12]" as_ord="1">* Matching 01: *******************************************</c>
<c as_id="matching" as_name="Matching 01" as_grp="[12]" as_ord="2">* Matching 01: END of generated code for model application</c>
<c as_id="matching" as_name="Matching 01" as_grp="[12]" as_ord="3">* Matching 01: *******************************************</c>
<c as_id="matching" as_name="Matching 01" as_grp="[12]" as_ord="4">* </c>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,1]" as_ord="1">* Image Acquisition 01: Code generated by Image Acquisition 01</c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,2]" as_ord="1">list_files ('C:/Users/lenovo/Desktop/4个角', ['files','follow_links'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="1">tuple_regexp_select (ImageFiles, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,2]" as_ord="1">for Index := 0 to |ImageFiles| - 1 by 1</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,3]" as_ord="1">    read_image (Image, ImageFiles[Index])</l>
<l>    threshold (Image, Regions, 0, 96)</l>
<l>    connection(Regions, ConnectedRegions)</l>
<l>    closing_circle(ConnectedRegions, RegionClosing, 3.5)</l>
<c>   </c>
<l>    shape_trans(ConnectedRegions, RegionTrans, 'rectangle2')</l>
<l>    fill_up(RegionTrans, RegionFillUp)</l>
<c>    </c>
<l>    select_shape (RegionFillUp, SelectedRegions, 'area', 'and', 222931, 663265)</l>
<l>    dev_display(Image)</l>
<l>    dev_display(SelectedRegions)</l>
<c>    </c>
<c>    </c>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,4]" as_ord="1">    * Image Acquisition 01: Do something</c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[3,1]" as_ord="1">endfor</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
